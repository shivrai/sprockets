// Copyright 2016 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module example;

// Constants
//
const string kHelloWorld;

// Roles
//
role rSender {
  string ipAddress;
  string transportId;
}

role rReceiver {
  string ipAddress;
  string transportId;
}

// States
//
state sTlsState(int tlsId) {
  kNotConnected,
  kConnected,
}

// Messages
//
message mSimpleMessage {
  encode "stl.lib.JsonEncoding";
  required string words;
}

message[] mMessageArray {
  encode "stl.lib.JsonEncoding";
  required int i;
}

message mProtoMessage {
  encode "stl.lib.ProtobufEncoding";
  external "proto.example_pb2.SimpleMsg";
}

message mMessageWithData {
  encode "stl.lib.JsonEncoding";

  required int request_id;
  required string data;
  optional string optional_data;
  repeated string optional_repeated_data;
  optional mNestedMessage optional_nested_data;

  message mNestedMessage {
    required string data;
  }
}

message mCustomEncodeMessage {
  encode "example_lib.KeyValueEncoding";
  required int request_id : "ord" = 0, "key" = "ri";
  required string data : "ord" = 1, "key" = "da";
}

// Qualifiers
//
qualifier int UniqueInt() = external "stl.lib.UniqueInt";

// Events
//
event Sleep(int tlsId) = external "noop.Sleep";
event LogParams(mSimpleMessage msg) = external "noop.LogParams";
event LogEncodedParams(mMessagearray msg) = external "noop.LogEncodedParams";

event SendRequest(int& requestId, string data) =
    LogEncodedParams(mMessageWithData {
                       request_id = UniqueInt() -> requestId;
                       data = data;
                     });

event SendResponse(int requestId, string data) =
    LogEncodedParams(mMessageWithData {
                       request_id = requestId;
                       data = data;
                     });

event SendRequestCustom(int& requestId, string data) =
    LogEncodedParams(mCustomEncodeMessage {
                       request_id = UniqueInt() -> requestId;
                       data = data;
                     });

event SendResponseCustom(int requestId, string data) =
    LogEncodedParams(mCustomEncodeMessage {
                       request_id = requestId;
                       data = data;
                     });

// Transitions
//
transition tConnectTls(int tlsId) {
  pre_states = [ sTlsState(tlsId).kNotConnected ]
  events {
    rSender -> Sleep(tlsId) -> rReceiver;
  }
  post_states = [ sTlsState(tlsId).kConnected ]
}

transition tDisconnectTls(int tlsId) {
  pre_states = [ sTlsState(tlsId).kConnected ]
  events {
    rSender -> LogParams(mSimpleMessage { words = kHelloWorld; }) -> rReceiver;
    rSender -> LogEncodedParams(mMessageArray [{ i = 600; }, {i = 30;}]) -> rReceiver;
    rSender -> LogEncodedParams(mProtoMessage {
                                  foo = mMessageArray [{ i = 13; }, { i = 14;}];
                                  fizz = 12345;
                                  buzz = [true, true, false];
                                }) -> rReceiver;
  }
  post_states = [ sTlsState(tlsId).kNotConnected ]
}

transition tRequestResponse(int tlsId) {
  int requestId;
  pre_states = [ sTlsState(tlsId).kConnected ]
  events {
    rSender -> SendRequest(&requestId, "REQUEST") -> rReceiver;
    rReceiver -> SendResponse(requestId, "RESPONSE") -> rSender;
  }
  post_states = []
}

transition tRequestResponseCustom(int tlsId) {
  int requestId;
  pre_states = [ sTlsState(tlsId).kConnected ]
  events {
    rSender -> SendRequestCustom(&requestId, "REQUEST") -> rReceiver;
    rReceiver -> SendResponseCustom(requestId, "RESPONSE") -> rSender;
  }
  post_states = []
}
